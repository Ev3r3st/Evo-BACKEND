generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id              Int               @id @default(autoincrement())
  username        String            @unique
  email           String            @unique
  password        String
  fullname        String?
  address         String?
  createdAt       DateTime          @default(now())
  goals           Goal[]
  progress        Progress[]
  courses         UserCourse[]
  completedLessons CompletedLesson[]
}

model Goal {
  id                  Int      @id @default(autoincrement())
  goal_name           String
  reason              String?
  destination         String?
  new_self            String?
  daily_action        String?
  daily_learning      String?
  daily_visualization String?
  duration            Int
  userId    Int
  user      User      @relation(fields: [userId], references: [id])
  progress  Progress[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Progress {
  id                 Int      @id @default(autoincrement())
  userId             Int
  goalId             Int
  completedDays      Int      @default(0)
  lastCompletionDate DateTime?
  streak             Int      @default(0)

  user User @relation(fields: [userId], references: [id])
  goal Goal @relation(fields: [goalId], references: [id])
}

model Course {
  id          Int       @id @default(autoincrement())
  name        String
  description String
  image       String?
  lessons     Lesson[]
  users       UserCourse[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Lesson {
  id          Int       @id @default(autoincrement())
  title       String
  subtitle    String?
  content     String
  duration    Int
  order       Int       @default(0)
  courseId    Int
  course      Course    @relation(fields: [courseId], references: [id])
  completedBy CompletedLesson[]
}

model UserCourse {
  id          Int       @id @default(autoincrement())
  userId      Int
  courseId    Int
  progress    Int       @default(0)  // Procento dokončení
  startedAt   DateTime  @default(now())
  completedAt DateTime?
  user        User      @relation(fields: [userId], references: [id])
  course      Course    @relation(fields: [courseId], references: [id])
  
  @@unique([userId, courseId])
}

// Nový model pro sledování dokončených lekcí uživatele
model CompletedLesson {
  id        Int      @id @default(autoincrement())
  userId    Int
  lessonId  Int
  courseId  Int      // Pro snadnější dotazování
  completedAt DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id])
  lesson    Lesson   @relation(fields: [lessonId], references: [id])
  
  @@unique([userId, lessonId])
}